1 初识Java IO
**-输入与输出是相对于应用程序而言的，比如文件读写，读取文件是输入流，写文件是输出流，这点很容易搞反。

IO，即in和out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。

Java 中是通过流处理IO 的，那么什么是流？
    流（Stream），是一个抽象的概念，是指一连串的数据（字符或字节），是以先进先出的方式发送信息的通道。
    当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。
    类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。这时候你就可以想象数据好像在这其中“流”动一样。

一般来说关于流的特性有下面几点：
    1、先进先出：最先写入输出流的数据最先被输入流读取到。
    2、顺序存取：可以一个接一个地往流中写入一串字节，读出时也将按写入顺序读取一串字节，不能随机访问中间的数据。（RandomAccessFile除外）
    只读或只写：每个流只能是输入流或输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。
    3、在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流。

1.1 IO流分类
    IO流主要的分类方式有以下3种：
        1、按数据流的方向：输入流、输出流
        2、按处理数据单位：字节流、字符流
        3、按功能：节点流、处理流

    字节流和字符流的其他区别：
        1、字节流一般用来处理图像、视频、音频、PPT、Word等类型的文件。字符流一般用于处理纯文本类型的文件，如TXT文件等，但不能处理图像视频等非文本文件。
        用一句话说就是：字节流可以处理一切文件，而字符流只能处理纯文本文件。
        2、字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。
        详见文末效率对比。

4.1 位、字节、字符
    字节(Byte)是计量单位，表示数据量多少，是计算机信息技术用于计量存储容量的一种计量单位，通常情况下一字节等于八位。

    字符(Character)计算机中使用的字母、数字、字和符号，比如’A’、‘B’、’$’、’&'等。

    一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。

    字节与字符：
        ASCII 码中，一个英文字母（不分大小写）为一个字节，一个中文汉字为两个字节。
        UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。
        Unicode 编码中，一个英文为一个字节，一个中文为两个字节。
        符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 . 占1个字节的大小，中文句号 。占2个字节的大小。
        UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节（Unicode 扩展区的一些汉字存储需要 4 个字节）。
        UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。