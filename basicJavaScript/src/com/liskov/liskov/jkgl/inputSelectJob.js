// 初始化操作var tmpContentKeyAjaxJob = "";//鼠标滑动到选项上 保存的结果var tmpContentValueAjaxJob = "";//鼠标滑动到选项上 保存的结果var tmpContentKeyAjaxFinalJob = "";//选中 确定的结果var tmpContentValueAjaxFinalJob = "";//选中 确定的结果var targetIdJob = "";//选中 确定结果 所对应的input的id//处理【聚焦】和【单击】和【双击】不冲突的函数handleWiselyAjaxJob的变量//2010-12-16加入的新功能var focusIntervalTimeAjaxJob = 100; // 聚焦 和 单击的 间隔小于100ms 响应单击事件var clickIntervalTimeAjaxJob = 400; // 点击间隔小于400ms 响应双击事件  var dcEventTimeAjaxJob = 0; // 当前触发双击的时间 的毫秒数var cEventTimeAjaxJob = 0; // 当前触发单击的时间 的毫秒数 var fEventTimeAjaxJob = 0; // 当前触发 聚焦的时间 的毫秒数var saveDelayFocusOptAjaxJob = null; // 保存 延迟发出的【聚焦】操作var saveDelayClickOptAjaxJob = null; // 保存 延迟发出的【单击】操作var fireFocusFunNameAjaxJob = "onfocusInputSelectAjaxJobJob(target)";// 单击触发函数字符串 便于eval触发函数var fireClickFunNameAjaxJob = "onclickInputAjaxJob(target)";// 单击触发函数字符串 便于eval触发函数var fireDblClickFunNameAjaxJob = "onDoubleClickInputAjaxJob(target)";// 双击触发函数字符串 便于eval触发函数//onpropertychange事件是否有效 解决初始化页面对父节点赋值导致子节点值 置空的问题var onpropertychangeabledJob = false;// 给所有设置了class='selectInputAjax'的input添加对象事件var allInputSelectAjax = document.getElementsByTagName('INPUT');window.attachEvent('onload', initTheInputEventAjaxJob);// 初始化divdocument.write("<div id='queryResultJobAjax' class='zTreeDemoBackground left' ");document.write("style='position:absolute;display:none;overflow-x:hidden;z-index:1000;padding:10px;'></div>")// 初始化对应input的事件function initTheInputEventAjaxJob() {	for ( var i = 0; i < allInputSelectAjax.length; i++) {		if (allInputSelectAjax[i].className == 'selectInputJobAjax') {			// 设置样式			if (allInputSelectAjax[i].value == ""					|| allInputSelectAjax[i].value == null) {				allInputSelectAjax[i].style.color = '#666666';				allInputSelectAjax[i].value = '请输入';			}			// 添加事件			allInputSelectAjax[i].attachEvent('onfocus', constructFuncAjaxJob(					allInputSelectAjax[i], handleWiselyAjaxJob));			allInputSelectAjax[i].attachEvent('onkeydown', constructFuncAjaxJob(					allInputSelectAjax[i], chooseResultAjaxJob));			allInputSelectAjax[i].attachEvent('onblur', constructFuncAjaxJob(					allInputSelectAjax[i], completeInputAjaxJob));			allInputSelectAjax[i].attachEvent('onclick', constructFuncAjaxJob(					allInputSelectAjax[i], handleWiselyAjaxJob));			allInputSelectAjax[i].attachEvent('ondblclick', constructFuncAjaxJob(					allInputSelectAjax[i], handleWiselyAjaxJob));			allInputSelectAjax[i].attachEvent('onpropertychange',					constructFuncAjaxJob(allInputSelectAjax[i],							onchangePropertyAjaxJob));		} else {			try { // 判断动态变量是否定义				if (typeof (eval(allInputSelectAjax[i].id + "ParentId")) != 'undefined') {//变量不存在会抛出异常					var tmpParentId = eval(allInputSelectAjax[i].id							+ "ParentId");					document.getElementById(tmpParentId).attachEvent(							'onpropertychange',							constructFuncAjaxJob(allInputSelectAjax[i],									makeDefaultAjaxJob));				}			} catch (e) { // 不做任何事			}		}	}}//处理 聚焦 单击 双击 共存的函数function handleWiselyAjaxJob(target) {	target.select();	var eventType = window.event.type; // 事件 	switch (eventType) {	case "focus":		fEventTimeAjaxJob = new Date().getTime();		//进入等C状态		saveDelayFocusOptAjaxJob = setTimeout(function() {			if (fEventTimeAjaxJob - cEventTimeAjaxJob <= 0) {				return false;			}			;			eval(fireFocusFunNameAjaxJob);		}, focusIntervalTimeAjaxJob);		break;	case "click":		cEventTimeAjaxJob = new Date().getTime();		if (saveDelayFocusOptAjaxJob != null) {			saveDelayFocusOptAjaxJob = null;		}		saveDelayClickOptAjaxJob = setTimeout(function() {//F在前 从等C进入等D状态					if (cEventTimeAjaxJob - dcEventTimeAjaxJob <= 0) {						return false;					}					;					eval(fireClickFunNameAjaxJob);				}, clickIntervalTimeAjaxJob);		break;	case "dblclick":		if (saveDelayClickOptAjaxJob != null) {			saveDelayClickOptAjaxJob = null;		}		dcEventTimeAjaxJob = new Date().getTime();		eval(fireDblClickFunNameAjaxJob);		break;	default:		;	}}// 设置联动子菜单为默认值function makeDefaultAjaxJob(target) {	target.value = "";	var childMenuLabel = document.getElementById(target.id + 'Label');	childMenuLabel.value = "请输入";	childMenuLabel.style.color = '#666666';}// 封装闭包函数 用于绑定事件function constructFuncAjaxJob(args, handler) {// args要调用方法的参数 handler用调用的方法	// 返回一个函数对象 闭包	return function() {		handler(args);	}}// 页面回车换单元格function TabKeyEventAjaxJob(target) {	if (event.keyCode == 13) {		event.keyCode = 9;	}}// div渲染function queryDataAjaxJob(target, url, linkElementId) {	// 重新定位按上下键选择的行数	divTableChooseRowAjax = -1;	// 清空div	document.getElementById('queryResultJobAjax').innerHTML = "";	// 处理	var parentCode = "";	var dataAjax = {		'inputText' : target.value	}	if (linkElementId != null && linkElementId != "") {		parentCode = document.getElementById(linkElementId).value;		if (parentCode == '' || parentCode == null) {			return;		}		dataAjax = {			'inputText' : target.value,			'parentCode' : parentCode		}	}	AjaxCall( {		url : url,		data : dataAjax,		context : target,		recall : function(target, result) {			var point = getElementPosAjaxJob(target);			var resultDiv = document.getElementById("queryResultJobAjax");			resultDiv.style.top = point.y + 17;			resultDiv.style.left = point.x - 2;			resultDiv.style.display = 'block';			resultDiv.style.width = target.offsetWidth + 20;			var content = "";			var divWidth = 0;			content = content + "<ul id=\"treeDemo\" class=\"ztree\"></ul>";			tmpContentKeyAjaxJob = "";			tmpContentValueAjaxJob = "";			divWidth = 220;			resultDiv.style.width = divWidth;			resultDiv.innerHTML = content;			var setting = {				view : {					fontCss: getFontCss,					dblClickExpand : false				},				data : {					simpleData : {						enable : true					}				},				callback : {					onClick : onClick				}			};			function onClick(e, treeId, treeNode) {				var zTree = $.fn.zTree.getZTreeObj("treeDemo");				zTree.expandAll(false); // 折叠全部节点				zTree.expandNode(treeNode);				if(treeNode.level != 0){ // 第0层节点只展开，不选中；第1、2层节点可选中					clickResultAjaxJob(treeNode.id, treeNode.name, target.id);					target.focus();				}			}			$(document).ready(function() {				$.fn.zTree.init($("#treeDemo"), setting, result);				if (dataAjax.inputText != "") {					searchNode(dataAjax.inputText);				}			});		// 如果结果为空 隐藏DIV		if (result.length == 0) {			resultDiv.style.display = 'none';		}	}	});}// 点击结果divfunction clickResultAjaxJob(key, value, id) {	tmpContentKeyAjaxFinalJob = key;	tmpContentValueAjaxFinalJob = value;	targetIdJob = id;	var targetValue = document.getElementById(id).value;	var targetKey = document.getElementById(id			.substring(0, id.indexOf('Label'))).value;	if (targetValue != value || targetKey != key) {		document.getElementById(id).value = value;		document.getElementById(id.substring(0, id.indexOf('Label'))).value = key;	}	document.getElementById('queryResultJobAjax').innerHTML = '';	document.getElementById('queryResultJobAjax').style.display = 'none';}// 完成输入后function completeInputAjaxJob(target) {	onpropertychangeabledJob = false;//首先 设置onpropertychange事件无效	if (document.activeElement.id.startWith('treeDemo') || 			document.activeElement.id== 'queryResultJobAjax') {//避免 click 和 onblur冲突 优先相应click 选取结果		return false;	}	if (tmpContentKeyAjaxFinalJob != "" && tmpContentValueAjaxFinalJob != ""			&& target.id == targetIdJob) {		target.style.color = '#000000';		target.value = tmpContentValueAjaxFinalJob;		var valueInputName = target.id.substring(0, target.id.indexOf('Label'))				+ "";		if (document.getElementById(valueInputName).value != tmpContentKeyAjaxFinalJob) {			document.getElementById(valueInputName).value = tmpContentKeyAjaxFinalJob;		}	} else {		target.style.color = '#666666';		target.value = '请输入';		document.getElementById(target.id.substring(0, target.id				.indexOf('Label'))).value = "";	}	document.getElementById('queryResultJobAjax').innerHTML = '';	document.getElementById('queryResultJobAjax').style.display = 'none';}// 鼠标移上查询结果 给隐藏域赋值function changeHideAjaxJob(key, value, target) {	target.style.background = "#CCE7FF";	tmpContentValueAjaxJob = value;	tmpContentKeyAjaxJob = key;}// 获取网页元素的绝对位置// 说明：用 Javascript 获取指定页面元素的位置function getElementPosAjaxJob(el) {	var ua = navigator.userAgent.toLowerCase();	var isOpera = (ua.indexOf('opera') != -1);	var isIE = (ua.indexOf('msie') != -1 && !isOpera); // not opera spoof	if (el.parentNode === null || el.style.display == 'none') {		return false;	}	var parent = null;	var pos = [];	var box;	if (el.getBoundingClientRect) // IE	{		box = el.getBoundingClientRect();		var scrollTop = Math.max(document.documentElement.scrollTop,				document.body.scrollTop);		var scrollLeft = Math.max(document.documentElement.scrollLeft,				document.body.scrollLeft);		return {			x : box.left + scrollLeft,			y : box.top + scrollTop		};	} else if (document.getBoxObjectFor) // gecko	{		box = document.getBoxObjectFor(el);		var borderLeft = (el.style.borderLeftWidth) ? parseInt(el.style.borderLeftWidth)				: 0;		var borderTop = (el.style.borderTopWidth) ? parseInt(el.style.borderTopWidth)				: 0;		pos = [ box.x - borderLeft, box.y - borderTop ];	} else // safari & opera	{		pos = [ el.offsetLeft, el.offsetTop ];		parent = el.offsetParent;		if (parent != el) {			while (parent) {				pos[0] += parent.offsetLeft;				pos[1] += parent.offsetTop;				parent = parent.offsetParent;			}		}		if (ua.indexOf('opera') != -1				|| (ua.indexOf('safari') != -1 && el.style.position == 'absolute')) {			pos[0] -= document.body.offsetLeft;			pos[1] -= document.body.offsetTop;		}	}	if (el.parentNode) {		parent = el.parentNode;	} else {		parent = null;	}	while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') { // account		// for		// any		// scrolled		// ancestors		pos[0] -= parent.scrollLeft;		pos[1] -= parent.scrollTop;		if (parent.parentNode) {			parent = parent.parentNode;		} else {			parent = null;		}	}	return {		x : pos[0],		y : pos[1]	};}// 选择结果 键盘事件var divTableChooseRowAjax = -1;function chooseResultAjaxJob(target) {	var table = document.getElementById("divTableAjax");	if (event.keyCode == 38) {//上建		if (document.getElementById('queryResultJobAjax').style.display == 'none') {//如果结果div隐藏 不进行操作			onchangePropertyAjaxJob(target);//去后台查看 			return;		}		if (divTableChooseRowAjax == -1) {			table.rows[table.rows.length - 1].style.background = '#80C3FF';			tmpContentKeyAjaxJob = table.rows[table.rows.length - 1]					.getElementsByTagName('INPUT')[0].value;			tmpContentValueAjaxJob = table.rows[table.rows.length - 1].cells[1].innerText;			divTableChooseRowAjax = table.rows.length - 1;		} else if (divTableChooseRowAjax == 0) {			table.rows[divTableChooseRowAjax].style.background = '#ffffff';			tmpContentKeyAjaxJob = "";			tmpContentValueAjaxJob = "";			divTableChooseRowAjax = -1;		} else if (divTableChooseRowAjax > 0) {			table.rows[divTableChooseRowAjax].style.background = '#ffffff';			table.rows[divTableChooseRowAjax - 1].style.background = '#80C3FF';			tmpContentKeyAjaxJob = table.rows[divTableChooseRowAjax - 1]					.getElementsByTagName('INPUT')[0].value;			tmpContentValueAjaxJob = table.rows[divTableChooseRowAjax - 1].cells[1].innerText;			divTableChooseRowAjax--;		}	}	if (event.keyCode == 40) {//下键		if (document.getElementById('queryResultJobAjax').style.display == 'none') {//如果结果div隐藏 不进行操作			onchangePropertyAjaxJob(target);			;//去后台查看			return;		}		if (divTableChooseRowAjax == table.rows.length - 1) {			table.rows[divTableChooseRowAjax].style.background = '#ffffff';			tmpContentKeyAjaxJob = "";			tmpContentValueAjaxJob = "";			divTableChooseRowAjax = -1;		} else if (divTableChooseRowAjax == -1) {			table.rows[divTableChooseRowAjax + 1].style.background = '#80C3FF';			tmpContentKeyAjaxJob = table.rows[divTableChooseRowAjax + 1]					.getElementsByTagName('INPUT')[0].value;			tmpContentValueAjaxJob = table.rows[divTableChooseRowAjax + 1].cells[1].innerText;			divTableChooseRowAjax = 0;		} else if (divTableChooseRowAjax < table.rows.length) {			table.rows[divTableChooseRowAjax].style.background = '#ffffff';			table.rows[divTableChooseRowAjax + 1].style.background = '#80C3FF';			tmpContentKeyAjaxJob = table.rows[divTableChooseRowAjax + 1]					.getElementsByTagName('INPUT')[0].value;			tmpContentValueAjaxJob = table.rows[divTableChooseRowAjax + 1].cells[1].innerText;			divTableChooseRowAjax++;		}	}	if (event.keyCode == 13) {//回车键		var expression = /[\d]+/g;		var filterNum = target.value.replace(/[^\d]+/g, '');		if (document.getElementById('queryResultJobAjax').style.display != 'none') {			if (target.value == "") {				tmpContentValueAjaxFinalJob = tmpContentValueAjaxJob;				tmpContentKeyAjaxFinalJob = tmpContentKeyAjaxJob;				targetIdJob = target.id;			} else if (!expression.test(target.value)) {				tmpContentValueAjaxFinalJob = tmpContentValueAjaxJob;				tmpContentKeyAjaxFinalJob = tmpContentKeyAjaxJob;				targetIdJob = target.id;			} else {				var indexnum = filterNum - 1;				if (indexnum >= 0 && indexnum < table.rows.length) {					tmpContentKeyAjaxFinalJob = table.rows[indexnum]							.getElementsByTagName('INPUT')[0].value;					tmpContentValueAjaxFinalJob = table.rows[indexnum].cells[1].innerText;					targetIdJob = target.id;				} else {					tmpContentKeyAjaxFinalJob = "";					tmpContentValueAjaxFinalJob = "";					targetIdJob = target.id;				}			}		}		event.keyCode = 9;	}}// 焦点到输入下拉框function onfocusInputSelectAjaxJobJob(target) {	if (!onpropertychangeabledJob) {//设置onpropertychange事件有效		onpropertychangeabledJob = true;	}	// 初始化全局变量	var targetHidden = document.getElementById(target.id.substring(0, target.id			.indexOf('Label'))).value;	if (targetHidden != "") {		tmpContentKeyAjaxFinalJob = targetHidden;		tmpContentValueAjaxFinalJob = target.value;		targetIdJob = target.id;	} else {		tmpContentKeyAjaxFinalJob = '';		tmpContentValueAjaxFinalJob = '';		targetIdJob = target.id;	}	// 操作	if (target.value == '请输入') {		target.style.color = '#000000';		target.value = '';//自动触发onpropertychange事件	}}// 更新输入下拉框的值后 触发的函数function onchangePropertyAjaxJob(target, tmpURL, tmpParentId) {	if (!onpropertychangeabledJob) {//onpropertychange无效 就不触发		return;	}	if (target.value == '请输入') {		document.getElementById('queryResultJobAjax').innerHTML = '';		document.getElementById('queryResultJobAjax').style.display = 'none';		return;	}	var expression = /[\d]+/g;//包含数字	//if (expression.test(target.value.substring(0,1))) {	//	return;	//} else {	if (tmpURL == null || tmpParentId == null) {		tmpURL = eval(target.id.substring(0, target.id.indexOf('Label'))				+ "Url");		try {			if (typeof (eval(target.id.substring(0, target.id.indexOf('Label'))					+ "ParentId")) != 'undefined') {				var tmpParentId = eval(target.id.substring(0, target.id						.indexOf('Label'))						+ "ParentId");			}		} catch (e) {			var tmpParentId = null;		}	}	queryDataAjaxJob(target, tmpURL, tmpParentId);	//}}// 点击输入框后的事件function onclickInputAjaxJob(target) {	if (!onpropertychangeabledJob) {//设置onpropertychange事件有效		onpropertychangeabledJob = true;	}	// 初始化全局变量	var targetHidden = document.getElementById(target.id.substring(0, target.id			.indexOf('Label'))).value;	if (targetHidden != "") {		tmpContentKeyAjaxFinalJob = targetHidden;		tmpContentValueAjaxFinalJob = target.value;		targetIdJob = target.id;	} else {		tmpContentKeyAjaxFinalJob = '';		tmpContentValueAjaxFinalJob = '';		targetIdJob = target.id;	}	if (target.value == '请输入') {		target.style.color = '000000';		target.value = '';//自动触发onpropertychange事件	} else {		onchangePropertyAjaxJob(target);//去后台查看	}}// 点击输入框后的事件function onDoubleClickInputAjaxJob(target) {	if (!onpropertychangeabledJob) {//设置onpropertychange事件有效		onpropertychangeabledJob = true;	}	target.value = '';	tmpContentKeyAjaxFinalJob = '';	tmpContentValueAjaxFinalJob = '';	targetIdJob = target.id;	var tmpURL = eval(target.id.substring(0, target.id.indexOf('Label'))			+ "Url");	try {		if (typeof (eval(target.id.substring(0, target.id.indexOf('Label'))				+ "ParentId")) != 'undefined') {			var tmpParentId = eval(target.id.substring(0, target.id					.indexOf('Label'))					+ "ParentId");		}	} catch (e) {		var tmpParentId = null;	}	queryDataAjaxJob(target, tmpURL, tmpParentId);}var nodeList = [];            function searchNode(value) {	var zTree = $.fn.zTree.getZTreeObj("treeDemo");	var keyType = "name";	nodeList = zTree.getNodesByParamFuzzy(keyType, value);	updateNodes(true);		keyType = "id";	nodeList = zTree.getNodesByParamFuzzy(keyType, value);	updateNodes(true);}function updateNodes(highlight) {	var zTree = $.fn.zTree.getZTreeObj("treeDemo");	for ( var i = 0, l = nodeList.length; i < l; i++) {		nodeList[i].highlight = highlight;		zTree.updateNode(nodeList[i]);		if (zTree.expandNode(nodeList[i], true, false, false) == null) {			zTree.expandNode(nodeList[i].getParentNode(), true, false, false);		}	}}function getFontCss(treeId, treeNode) {	return (!!treeNode.highlight) ? {color:"#A60000", "font-weight":"bold"} : {color:"#333", "font-weight":"normal"};}String.prototype.startWith = function(str) {	if (str == null || str == "" || this.length == 0			|| str.length > this.length)		return false;	if (this.substr(0, str.length) == str)		return true;	else		return false;	return true;}