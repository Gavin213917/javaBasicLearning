Collection子接口以及常用实现类：

集合：增删插改、长度、索引、循环 、排序 去重、取交集

Collection接口
　　|--List接口：有序(存入和取出的顺序一致),元素都有索引(角标)，元素可以重复。

　　　　|--Vector:内部是 数组 数据结构，是同步的。增删，查询都很慢！100%延长（几乎不用了） 
 
　　　　|--ArrayList:内部是 数组 数据结构，是不同步的。替代了Vector，查询的速度快，增删速度慢。50%延长。(1.5倍)
				     （查询时是从容器的第一个元素往后找，由于数组的内存空间是连续的，所以查询快；增删的话所有元素内存地址都要改变，所以增删慢。）
				     
　　　　|--LinkedList:内部是 链表 数据结构，是不同步的。增删元素的速度很快。（是通过链表、队列、栈实现的，双向链表结构）
		                      （同理，链表的内存空间是不连续的，所以查询慢；增删时只需改变单个指针的指向，所以快；）

　　|--Set接口：1.无序，元素不能重复。Set接口中的方法和Collection一致。
		       2.不允许出现相同的元素，里面进行过滤，每次执行是无序进行存储。
		       3.set不是用数组来封装的，没有索引，他区别于list，list是用数组封装的，有索引。
		       4.set 存对象时，需要重写 hashcode 和 equals 方法。

　　　　|--HashSet: 内部数据结构是哈希表（hashcode，是数字比较，没有索引） ，无序的，是不同步的。
　　　　　　|--LinkedHashSet：内部数据结构是哈希表和链表，是有顺序的HashSet，性能比hashset差。

	   |--SortedSet:
　　　　       |--TreeSet：内部数据结构是有序的二叉树，它的作用是提供有序的Set集合，是不同步的。

 　　      |--EnumSet:

List接口：
　　有一个最大的共性特点就是都可以操作角标，所以LinkedList也是有索引的。list集合可以完成对元素的增删改查。

 

Set和List的区别：

　　1. Set 接口实例存储的是无序的，不重复的数据，可以插入null。List 接口实例存储的是有序的，可以重复的元素 <最本质区别>。

　　2. Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 。

　　3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变  。



ArryList和Vector可变长度数组的原理：

　　     当默认长度的数组不够存储时，会建立一个新数组。将原来数组的内容拷贝到新的数组当中，并将新增加的元素追加到拷贝完的数组尾，如果仍然不够重复上述动作。
       其中,ArryList的增加是以原来50%长度进行增加，而Vector是按照100%延长。

 

ArryList是线程不安全的，Vector是安全的：

由于是否有锁的判断将影响效率，故Arrylist效率远远高于Vector。而且只要是常用的容器就不是同步的，因为同步效率比较低。


如何保证HashSet的元素唯一性呢？
　　是通过对象的hashCode和equals方法来完成对象唯一性的：
　　　　->如果对象的hashCode值不同，那么不用判断equals方法，就直接存储到哈希表中。 
　　　　->如果对象的hashCode值相同，那么要再次判断对象的equals方法是否为true:
　　　　　　如果为true，视为相同元素，不存；如果为false，那么视为不同元素，就进行存储。

　　记住：如果对象要存储到HashSet集合中，该对象必须覆盖hashCode方法和equals方法。
　　一般情况下，如果定义的类会产生很多对象，比如人，学生，书，通常都需要覆盖equals，hashCode方法，以建立对象判断是否相同的依据。

TreeSet默认判断元素唯一性的方式：

　　根据Conpare接口的比较方法conpareTo的返回结果是否是0，是0，就是相同元素，不存。 

 

下面，我们给出两种自定义判断元素唯一性的方式：

方式一：

　　让元素自身具备比较功能，即根据元素中的属性来比较。采用这种方式需要元素实现Comparable接口，覆盖compareTo方法。

　　例：往TreeSet集合中存储Person对象。如果姓名和年龄相同，视为同一个人，视为相同元素。

 方式二：（开发用这个，掌握比较器的用法）

　　让集合自身具备比较功能。自己写一个比较器，先定义一个类实现Comparator接口，覆盖compare方法。然后将该类对象作为参数传递给TreeSet集合的构造函数。

　　不再需要元素实现Conparable接口。


Map==set+linkedList 接口与Set类似，可以对照着来学，比如比较器在TreeMap中也适用。

 

Map：    一次添加一对元素，Collection 一次添加一个元素。

　　　　Map也称为双列集合，Collection集合也称为单列集合。

　　　　其实map集合中存储的就是键值对，map集合中必须保证键的唯一性。 

常用方法：

1，添加
value put(key,value):返回前一个和key关联的值，如果没有返回null.

2，删除
	void clear():清空map集合。
	value remove(key):根据指定的key翻出这个键值对。

3，判断
	boolean containsKey(key):是否包含该key
	boolean containsValue(value):是否包含该value
	boolean isEmpty();是否为空

4，获取

	value get(key):通过键获取值，如果没有该键返回null。当然，可以通过是否返回null，来判断是否包含指定键。
	
	int size(): 获取键值对的个数。 

Map常用的子类：（*HashMap与Hashtable的区别，面试常问*,详见这个博客。）

　　|--Hashtable :内部结构是哈希表，是同步的。不允许null作为键，null作为值。
　　　　|--Properties：用来存储键值对型的配置文件的信息，可以和IO技术相结合。 
　　|--HashMap : 内部结构是哈希表，不是同步的。允许null作为键，null作为值。
　　|--TreeMap : 内部结构是二叉树，不是同步的。可以对Map集合中的键进行排序。 

Map的迭代方法：

　　Map本身没有迭代器。

　　 方法一：利用Map接口的values()方法,返回此映射中包含的值的 Collection （值不唯一），

　　　　　　然后通过Collecion的迭代器进行迭代。（只需要Value，不需要Key的时候）


       方法二：通过keySet方法获取map中所有的键所在的Set集合（Key和Set的都具有唯一性），

　　　　　　再通过Set的迭代器获取到每一个键，再对每一个键通过Map集合的get方法获取其对应的值即可。

       方法三：利用Map的内部接口Map.Entry<K,V>使用iterator。　　

　　　　　　通过Map的entrySet()方法，将键和值的映射关系作为对象存储到Set集合中。

　　　　　　这个映射关系的类型就是Map.Entry类型(结婚证)。

　　　　　　再通过Map.Entry对象的getKey和getValue获取其中的键和值。


       方法四：通过Map.entrySet()方法遍历key和value（推荐，尤其是容量大时）

























































